//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Componentns.Inventory componentnsInventory { get { return (Componentns.Inventory)GetComponent(GameComponentsLookup.ComponentnsInventory); } }
    public bool hasComponentnsInventory { get { return HasComponent(GameComponentsLookup.ComponentnsInventory); } }

    public void AddComponentnsInventory(System.Collections.Generic.Dictionary<int, Entitas.Entity> newItems) {
        var index = GameComponentsLookup.ComponentnsInventory;
        var component = (Componentns.Inventory)CreateComponent(index, typeof(Componentns.Inventory));
        component.Items = newItems;
        AddComponent(index, component);
    }

    public void ReplaceComponentnsInventory(System.Collections.Generic.Dictionary<int, Entitas.Entity> newItems) {
        var index = GameComponentsLookup.ComponentnsInventory;
        var component = (Componentns.Inventory)CreateComponent(index, typeof(Componentns.Inventory));
        component.Items = newItems;
        ReplaceComponent(index, component);
    }

    public void RemoveComponentnsInventory() {
        RemoveComponent(GameComponentsLookup.ComponentnsInventory);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherComponentnsInventory;

    public static Entitas.IMatcher<GameEntity> ComponentnsInventory {
        get {
            if (_matcherComponentnsInventory == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.ComponentnsInventory);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherComponentnsInventory = matcher;
            }

            return _matcherComponentnsInventory;
        }
    }
}
